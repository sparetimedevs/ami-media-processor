// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package musicxml

/** MusicXML Opus W3C XML schema (XSD)

Version 3.1

Copyright Â© 2004-2017 the Contributors to the MusicXML Specification, published by the W3C Music Notation Community Group under the W3C Community Final Specification Agreement (FSA):

	https://www.w3.org/community/about/agreements/final/

A human-readable summary is available:

	https://www.w3.org/community/about/agreements/fsa-deed/

This is the W3C XML Schema (XSD) version of the MusicXML 3.1 language. Validation is tightened by moving MusicXML definitions from comments into schema data types and definitions. Character entities and other entity usages that are not supported in W3C XML Schema have also been removed. However, the features of W3C XML Schema make it easier to define variations of the MusicXML format, either via extension or restriction.

An opus collects MusicXML scores together into a larger entity. The individual scores could be movements in a symphony, scenes or acts in an opera, or songs in an album. The opus definition allows arbitrary nesting either via an opus (included in the document) or an opus-link (linked like scores). Future versions of the MusicXML format may expand this schema to include reference data and other metadata related to musical scores.
*/

sealed trait Yesu45no

object Yesu45no {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[musicxml.Yesu45no]): Yesu45no = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Yesu45no) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Yesu45no] = Seq(Yes, No)
}

case object Yes extends Yesu45no { override def toString = "yes" }
case object No extends Yesu45no { override def toString = "no" }


/** The opus type is used for the root element of a MusicXML opus. Each opus is made up of a series of score, opus-link, and/or nested opus elements. The document-attributes attribute group includes the version attribute. Future versions may include more metadata elements. In this version, we just include the title of the opus.
*/
case class Opus(title: Option[String] = None,
  opusoption: Seq[scalaxb.DataRecord[musicxml.OpusOption]] = Nil,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends OpusOption {
  lazy val version = attributes("@version").as[String]
}

      
      

trait OpusOption

/** An opus-link provides a link to another opus document, allowing for multiple levels of opus collections via linking as well as nesting.
*/
case class Opusu45link(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends OpusOption {
  lazy val xlinkhref = attributes("@{http://www.w3.org/1999/xlink}href").as[java.net.URI]
  lazy val xlinktype = attributes("@{http://www.w3.org/1999/xlink}type").as[Type]
  lazy val xlinkrole = attributes.get("@{http://www.w3.org/1999/xlink}role") map { _.as[String]}
  lazy val xlinktitle = attributes.get("@{http://www.w3.org/1999/xlink}title") map { _.as[String]}
  lazy val xlinkshow = attributes("@{http://www.w3.org/1999/xlink}show").as[Show]
  lazy val xlinkactuate = attributes("@{http://www.w3.org/1999/xlink}actuate").as[Actuate]
}

      
      


/** The score elements provide the links to the individual movements. The new-page attribute, added in Version 2.0, is used to indicate if the first page of the score is different than the last page of the previous score. If new-page is "yes", then a different page is used; if "no", then the same page is used. The default value is implementation-dependent.
*/
case class Score(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) extends OpusOption {
  lazy val xlinkhref = attributes("@{http://www.w3.org/1999/xlink}href").as[java.net.URI]
  lazy val xlinktype = attributes("@{http://www.w3.org/1999/xlink}type").as[Type]
  lazy val xlinkrole = attributes.get("@{http://www.w3.org/1999/xlink}role") map { _.as[String]}
  lazy val xlinktitle = attributes.get("@{http://www.w3.org/1999/xlink}title") map { _.as[String]}
  lazy val xlinkshow = attributes("@{http://www.w3.org/1999/xlink}show").as[Show]
  lazy val xlinkactuate = attributes("@{http://www.w3.org/1999/xlink}actuate").as[Actuate]
  lazy val newu45page = attributes.get("@new-page") map { _.as[Yesu45no]}
}

      
      
//
//
///** The link-attributes group includes all the simple XLink attributes supported in the MusicXML format.
//*/
//case class Linku45attributes(xlinkhref: java.net.URI,
//  xlinktype: musicxml.Type,
//  xlinkrole: Option[String] = None,
//  xlinktitle: Option[String] = None,
//  xlinkshow: musicxml.Show,
//  xlinkactuate: musicxml.Actuate)
//
//
///** The document-attributes attribute group is used to specify the attributes for an entire MusicXML document. Currently this is used for the version attribute.
//
//The version attribute was added in Version 2.0 for opus documents. It provides an easier way to get version information than through the MusicXML public ID. The default value is 1.0 to make it possible for programs that handle later versions to distinguish earlier version files reliably. Programs that write MusicXML 2.0 or later opus files should set this attribute.
//*/
//case class Documentu45attributes(version: String)
//
