// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package musicxml

/** MusicXML XLink module

Version 3.1

Copyright Â© 2004-2017 the Contributors to the MusicXML Specification, published by the W3C Music Notation Community Group under the W3C Community Final Specification Agreement (FSA):

	https://www.w3.org/community/about/agreements/final/

A human-readable summary is available:

	https://www.w3.org/community/about/agreements/fsa-deed/

This is the W3C XML Schema (XSD) version of the MusicXML 3.1 language. Validation is tightened by moving MusicXML definitions from comments into schema data types and definitions. Character entities and other entity usages that are not supported in W3C XML Schema have also been removed. However, the features of W3C XML Schema make it easier to define variations of the MusicXML format, either via extension or restriction.
	
This schema module defines the subset of XLink attributes that are supported in the MusicXML schema. All definitions here are in the XLink namespace.
*/

sealed trait Type

object Type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[musicxml.Type]): Type = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Type) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Type] = Seq(Simple)
}

case object Simple extends Type { override def toString = "simple" }
sealed trait Show

object Show {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[musicxml.Show]): Show = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Show) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Show] = Seq(New, Replace, Embed, OtherValue5, NoneTypeValue15)
}

case object New extends Show { override def toString = "new" }
case object Replace extends Show { override def toString = "replace" }
case object Embed extends Show { override def toString = "embed" }
case object OtherValue5 extends Show { override def toString = "other" }
case object NoneTypeValue15 extends Show { override def toString = "none" }

sealed trait Actuate

object Actuate {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[musicxml.Actuate]): Actuate = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: Actuate) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[Actuate] = Seq(OnRequest, OnLoad, OtherValue6, NoneTypeValue16)
}

case object OnRequest extends Actuate { override def toString = "onRequest" }
case object OnLoad extends Actuate { override def toString = "onLoad" }
case object OtherValue6 extends Actuate { override def toString = "other" }
case object NoneTypeValue16 extends Actuate { override def toString = "none" }
